/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package org.footer.soundboard;

import com.aayushatharva.brotli4j.Brotli4jLoader;
import com.aayushatharva.brotli4j.encoder.Encoder;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.IOException;
import java.io.InputStream;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpRequest.BodyPublishers;
import java.net.http.HttpResponse;
import java.net.http.HttpResponse.BodyHandlers;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashMap;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.ERROR_MESSAGE;
import javazoom.jl.player.Player;
import org.apache.commons.lang3.ArrayUtils;

/**
 *
 * @author footer
 */
public class Soundboard extends javax.swing.JFrame {
    
    public static class Error {
        public String error;
    }
    
    private String token;
    private String delimiter;
    private List<LinkedHashMap<String, String>> tracklist;
    private int idx;
    private final HttpClient httpClient;
    private Player player;

    /**
     * Creates new form MusicPlayer
     */
    
    private void refreshTracklist() {
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("http://127.0.0.1:8080/api/sound/list_tracks"))
                .header("Cookie", "SESSION_ID=" + this.token)
                .GET()
                .build();
        
        HttpResponse<String> response;
        
        try {
            response = httpClient.send(request, BodyHandlers.ofString());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "An error occurred while sending HTTP request:\n" + e.toString(), "Error", ERROR_MESSAGE);
            return;
        }
        
        String responseBody = response.body();
        
        ObjectMapper mapper = new ObjectMapper();
        try {
            this.tracklist = mapper.readValue(responseBody, List.class);
        } catch (JsonProcessingException e) {
            try {
                Error error = mapper.readValue(responseBody, Error.class);
                JOptionPane.showMessageDialog(rootPane, error.error, "Error", ERROR_MESSAGE);
                
            } catch (JsonProcessingException e1) {
                JOptionPane.showMessageDialog(rootPane, "An error occurred while processing the HTTP response:\n" + e1.toString(), "Error", ERROR_MESSAGE);
            }
            return;
        }
        
        if (!tracklist.isEmpty() || tracklist == null) {
            idx = 0;
            currentTrackFilenameLabel.setText(tracklist.get(idx).get("filename"));
        } else {
            currentTrackFilenameLabel.setText("");
        }
    }
    
    public Soundboard(String token) {
        initComponents();
        
        this.token = token;
        httpClient = HttpClient.newBuilder()
                .version(HttpClient.Version.HTTP_1_1)
                .build();
        delimiter = "audiotrack";
        
        refreshTracklist();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        prevBtn = new javax.swing.JButton();
        nextBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        playBtn = new javax.swing.JButton();
        currentTrackFilenameLabel = new javax.swing.JLabel();
        addTrackBtn = new javax.swing.JButton();
        removeTrackBtn = new javax.swing.JButton();
        logOutBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Soundboard");
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 204, 255));

        prevBtn.setBackground(new java.awt.Color(51, 0, 102));
        prevBtn.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        prevBtn.setForeground(new java.awt.Color(255, 255, 255));
        prevBtn.setText("<<");
        prevBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevBtnActionPerformed(evt);
            }
        });

        nextBtn.setBackground(new java.awt.Color(51, 0, 102));
        nextBtn.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        nextBtn.setForeground(new java.awt.Color(255, 255, 255));
        nextBtn.setText(">>");
        nextBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextBtnActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/music.png"))); // NOI18N

        playBtn.setBackground(new java.awt.Color(0, 204, 51));
        playBtn.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        playBtn.setText("Play");
        playBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playBtnActionPerformed(evt);
            }
        });

        currentTrackFilenameLabel.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N

        addTrackBtn.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        addTrackBtn.setText("Add track");
        addTrackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addTrackBtnActionPerformed(evt);
            }
        });

        removeTrackBtn.setBackground(new java.awt.Color(255, 0, 0));
        removeTrackBtn.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        removeTrackBtn.setText("Remove track");
        removeTrackBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeTrackBtnActionPerformed(evt);
            }
        });

        logOutBtn.setFont(new java.awt.Font("SansSerif", 0, 18)); // NOI18N
        logOutBtn.setText("Log out");
        logOutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logOutBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(currentTrackFilenameLabel)
                .addGap(359, 359, 359))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(207, 207, 207)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(playBtn)
                                .addGap(49, 49, 49)
                                .addComponent(addTrackBtn)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(49, 49, 49)
                                .addComponent(removeTrackBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(logOutBtn))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(prevBtn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(nextBtn)))
                .addGap(24, 24, 24))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(logOutBtn)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prevBtn)
                    .addComponent(nextBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentTrackFilenameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 256, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playBtn)
                    .addComponent(addTrackBtn)
                    .addComponent(removeTrackBtn))
                .addGap(55, 55, 55))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void prevBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevBtnActionPerformed
        if (idx - 1 < 0) {
            idx = tracklist.size() - 1;
        } else {
            idx--;
        }
        
        currentTrackFilenameLabel.setText(tracklist.get(idx).get("filename"));
    }//GEN-LAST:event_prevBtnActionPerformed

    private void nextBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextBtnActionPerformed
        if (idx + 1 > tracklist.size() - 1) {
            idx = 0;
        } else {
            idx++;
        }
        
        currentTrackFilenameLabel.setText(tracklist.get(idx).get("filename"));
    }//GEN-LAST:event_nextBtnActionPerformed

    private void addTrackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addTrackBtnActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        
        if (fileChooser.showOpenDialog(rootPane) == JFileChooser.APPROVE_OPTION) {
            String filename = fileChooser.getSelectedFile().getAbsolutePath();
            String[] filenameSplit = filename.split("/");
            
            byte[] fileContents;
            try {
                fileContents = Files.readAllBytes(Path.of(filename));
            } catch (IOException e) {
                JOptionPane.showMessageDialog(rootPane, "An error occurred while opening an audio file:\n" + e.toString(), "Error", ERROR_MESSAGE);
                return;
            }
            
            if (fileContents.length > 120000) {
                JOptionPane.showMessageDialog(rootPane, "File must not be larger than 120000 bytes.", "Error", ERROR_MESSAGE);
                return;
            }
            
            ArrayList<Byte> requestBody = new ArrayList(Arrays.asList(ArrayUtils.toObject(("--" + delimiter + "\r\n" + 
                                "Content-Disposition: form-data; name=\"track\"; filename=\"" + filenameSplit[filenameSplit.length - 1] + "\"\r\n\r\n").getBytes())));
            ArrayList<Byte> fileContentsArrList = new ArrayList(Arrays.asList(ArrayUtils.toObject(fileContents)));
            requestBody.addAll(fileContentsArrList);
            
            byte[] requestBodyArr = new byte[requestBody.size()];
            for (int i = 0; i < requestBodyArr.length; i++) {
                requestBodyArr[i] = requestBody.get(i).byteValue();
            }
            
            Brotli4jLoader.ensureAvailability();
            byte[] requestBodyCompressed;
            try {
                requestBodyCompressed = Encoder.compress(requestBodyArr);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(rootPane, "An error occurred while compressing the request body:\n" + e.toString(), "Error", ERROR_MESSAGE);
                return;
            }
            
            HttpRequest request = HttpRequest.newBuilder()
                        .uri(URI.create("http://127.0.0.1:8080/api/sound/add_track"))
                        .header("Cookie", "SESSION_ID=" + this.token)
                        .header("Content-Type", "multipart/form-data; boundary=\"" + delimiter + "\"")
                        .header("Content-Encoding", "br")
                        .POST(BodyPublishers.ofByteArray(requestBodyCompressed))
                        .build();

            HttpResponse<String> response;

            try {
                response = httpClient.send(request, BodyHandlers.ofString());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "An error occurred while sending HTTP request:\n" + e.toString(), "Error", ERROR_MESSAGE);
                return;
            }

            String responseBody = response.body();

            if (!responseBody.isEmpty()) {
                ObjectMapper mapper = new ObjectMapper();
                try {
                    Error error = mapper.readValue(responseBody, Error.class);
                    JOptionPane.showMessageDialog(rootPane, error.error, "Error", ERROR_MESSAGE);
                } catch (JsonProcessingException e) {
                    JOptionPane.showMessageDialog(rootPane, "An error occurred while processing the HTTP response:\n" + e.toString(), "Error", ERROR_MESSAGE);
                }
                return;
            }
            
            JOptionPane.showMessageDialog(rootPane, "Successfully added " + filenameSplit[filenameSplit.length - 1] + "!");
            
            refreshTracklist();
            
        }
    }//GEN-LAST:event_addTrackBtnActionPerformed

    private void playBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playBtnActionPerformed
        LinkedHashMap currentTrack = tracklist.get(idx);
        if (currentTrack != null && !currentTrack.isEmpty()) {
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create("http://127.0.0.1:8080/api/sound/get_track?id=" + currentTrack.get("id")))
                    .header("Cookie", "SESSION_ID=" + this.token)
                    .GET()
                    .build();
            
            HttpResponse<InputStream> response;

            try {
                response = httpClient.send(request, BodyHandlers.ofInputStream());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "An error occurred while sending HTTP request:\n" + e.toString(), "Error", ERROR_MESSAGE);
                return;
            }

            InputStream responseBodyStream = response.body();
            
            try {
                player = new Player(responseBodyStream);
                player.play();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "An error occurred while playing an:\n" + e.toString(), "Error", ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_playBtnActionPerformed

    private void removeTrackBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeTrackBtnActionPerformed
        LinkedHashMap currentTrack = tracklist.get(idx);
        if (currentTrack != null && !currentTrack.isEmpty()) {
            HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create("http://127.0.0.1:8080/api/sound/remove_track?id=" + currentTrack.get("id")))
                    .header("Cookie", "SESSION_ID=" + this.token)
                    .GET()
                    .build();
            
            HttpResponse<String> response;

            try {
                response = httpClient.send(request, BodyHandlers.ofString());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "An error occurred while sending HTTP request:\n" + e.toString(), "Error", ERROR_MESSAGE);
                return;
            }
            
            String responseBody = response.body();
            
            if (!responseBody.isEmpty()) {
                ObjectMapper mapper = new ObjectMapper();
                try {
                    Error error = mapper.readValue(responseBody, Error.class);
                    JOptionPane.showMessageDialog(rootPane, error.error, "Error", ERROR_MESSAGE);
                } catch (JsonProcessingException e) {
                    JOptionPane.showMessageDialog(rootPane, "An error occurred while processing the HTTP response:\n" + e.toString(), "Error", ERROR_MESSAGE);
                }
                return;
            }
            
            JOptionPane.showMessageDialog(rootPane, "Successfully removed " + currentTrack.get("filename") + "!");
            
            refreshTracklist();
        }
    }//GEN-LAST:event_removeTrackBtnActionPerformed

    private void logOutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logOutBtnActionPerformed
        HttpRequest request = HttpRequest.newBuilder()
                .uri(URI.create("http://127.0.0.1:8080/api/logout"))
                .header("Cookie", "SESSION_ID=" + this.token)
                .GET()
                .build();

        try {
            httpClient.send(request, BodyHandlers.discarding());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "An error occurred while sending HTTP request:\n" + e.toString(), "Error", ERROR_MESSAGE);
            return;
        }
        
        this.setVisible(false);
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Login().setVisible(true);
            }
        });
    }//GEN-LAST:event_logOutBtnActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addTrackBtn;
    private javax.swing.JLabel currentTrackFilenameLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton logOutBtn;
    private javax.swing.JButton nextBtn;
    private javax.swing.JButton playBtn;
    private javax.swing.JButton prevBtn;
    private javax.swing.JButton removeTrackBtn;
    // End of variables declaration//GEN-END:variables
}
